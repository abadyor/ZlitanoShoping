@using System.Text.Json
@* @inherits LayoutComponentBase
@inject NavigationManager Navigation
<div class="page">

    <main>
        <!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-primary text-white">
    <div class="container-fluid">
        <a class="navbar-brand text-white" href="#">زيــتـيانو</a>
        <div class="collapse navbar-collapse justify-content-end">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link text-white" href="#">الشركات والمصانع</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="#">المتاجر</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="#">المنتجات</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="#">لوحة التحكم</a>
                </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="/show-markets">لوحة market</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="/Login">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="/vendor-login">vendor-login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="/add-Customer">add-Customer</a>
                        </li>


            </ul>
        </div>
        <div class="d-flex align-items-center">
            <div class="me-3 text-white">USER</div>
            <img src="user-avatar.png" alt="User Avatar" class="rounded-circle" width="40" height="40">
        </div>
    </div>
</nav>
        <!-- Carousel -->
        <div id="mainCarousel" class="carousel slide mt-3 shadow" data-bs-ride="carousel">
            <div class="carousel-inner">
                <!-- First Slide -->
                <div class="carousel-item active">
                    <img src="/css/images/02.jpg" class="d-block w-100" alt="Slide 1">
                </div>

                <!-- Second Slide -->
                <div class="carousel-item">
                    <img src="/css/images/03.jpg" class="d-block w-100" alt="Slide 2">
                </div>

                <!-- Third Slide -->
                <div class="carousel-item">
                    <img src="/css/images/04.jpg" class="d-block w-100" alt="Slide 3">
                </div>
            </div>

            <!-- Carousel Navigation Controls -->
            <button class="carousel-control-prev" type="button" data-bs-target="#mainCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#mainCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private void NavigateToMarkets()
    {
        Navigation.NavigateTo("/show-markets");
    }
}
 *@
@* @inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="page">
    <main>
        <!-- Navbar -->
        <nav class="navbar navbar-expand-lg navbar-light bg-primary text-white">
            <div class="container-fluid">
                <a class="navbar-brand text-white" href="#">زيــتـيانو</a>
                <div class="collapse navbar-collapse justify-content-end">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#">الشركات والمصانع</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#">المتاجر</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#">المنتجات</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#">لوحة التحكم</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#" @onclick="() => SetPage(Vendor)">تاجير محل</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#" @onclick="() => SetPage(Customer)">Login</a>
                        </li>
                    </ul>
                </div>
                <div class="d-flex align-items-center">
                    <!-- Cart Icon -->
                    <div class="me-3 position-relative">
                        <button class="text-white bg-transparent border-0" @onclick="ToggleCart">
                            <i class="fas fa-shopping-cart fa-lg"></i>
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                @cartCount
                            </span>
                        </button>
                    </div>
                    <div class="me-3 text-white">USER</div>
                    <img src="user-avatar.png" alt="User Avatar" class="rounded-circle" width="40" height="40">
                </div>
            </div>
        </nav>

        <!-- Carousel -->
        <div id="mainCarousel" class="carousel slide mt-3 shadow" data-bs-ride="carousel">
            <div class="carousel-inner">
                <!-- First Slide -->
                <div class="carousel-item active">
                    <img src="/css/images/02.jpg" class="d-block w-100" alt="Slide 1">
                </div>

                <!-- Second Slide -->
                <div class="carousel-item">
                    <img src="/css/images/03.jpg" class="d-block w-100" alt="Slide 2">
                </div>

                <!-- Third Slide -->
                <div class="carousel-item">
                    <img src="/css/images/04.jpg" class="d-block w-100" alt="Slide 3">
                </div>
            </div>

            <!-- Carousel Navigation Controls -->
            <button class="carousel-control-prev" type="button" data-bs-target="#mainCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#mainCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>

        <!-- Cart Dropdown -->
        @if (isCartVisible)
        {
            <div class="cart-dropdown shadow rounded p-3">
                @if (cartItems != null && cartItems.Any())
                {
                    <h5 class="text-primary">محتويات السلة</h5>
                    <ul class="list-group">
                        @foreach (var item in cartItems)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <h6>@item.ProductName</h6>
                                    <small>الكمية: @item.Quantity</small>
                                </div>
                                <span class="badge bg-primary rounded-pill">@item.Total.ToString("C")</span>
                            </li>
                        }
                    </ul>
                    <div class="mt-3">
                        <button class="btn btn-success w-100" @onclick="ConfirmCart">تأكيد السلة</button>
                    </div>
                }
                else
                {
                    <p class="text-muted">السلة فارغة.</p>
                }
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private int cartCount = 0;
    private bool isCartVisible = false;
    private List<CartItem> cartItems = new();

    private string Vendor = "Vendor";
    private string Customer = "Customer";
    private string currentPage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItems();
        await UpdateCartCount();
    }

    private async Task LoadCartItems()
    {
        var cartItemsJson = await JS.InvokeAsync<string>("sessionStorage.getItem", "cartItems");

        if (!string.IsNullOrEmpty(cartItemsJson))
        {
            cartItems = JsonSerializer.Deserialize<List<CartItem>>(cartItemsJson);
        }
        else
        {
            cartItems = new List<CartItem>();
        }
    }

    private async Task UpdateCartCount()
    {
        await LoadCartItems();
        cartCount = cartItems?.Count ?? 0;
        StateHasChanged(); // تأكد من إعادة تحديث الواجهة
    }

    private void ToggleCart()
    {
        isCartVisible = !isCartVisible;
        StateHasChanged();  // تأكد من تحديث الحالة بعد التغيير
    }

    private async Task ConfirmCart()
    {
        // تنفيذ عملية تأكيد السلة
        await JS.InvokeVoidAsync("alert", "تم تأكيد السلة بنجاح!");
        isCartVisible = false;

        // قم بإفراغ السلة بعد التأكيد
        cartItems.Clear();
        await JS.InvokeVoidAsync("sessionStorage.setItem", "cartItems", JsonSerializer.Serialize(cartItems));
        await UpdateCartCount();

        // هنا يمكنك التوجيه إلى صفحة أخرى إذا لزم الأمر
       // Navigation.NavigateTo("/order-confirmation");
    }


    private async Task SetPage(string page)
    {
        await JS.InvokeVoidAsync("sessionStorage.setItem", "currentPage", page);
        currentPage = page;
        Navigation.NavigateTo("/Login", forceLoad: false);
    }

    public class CartItem
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public decimal Total => Price * Quantity;
    }
}
 *@

@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http
@using APPL.Services
@using System.Text.Json.Serialization
@inject ApiService ApiService

<div class="page">
    <main>
        <!-- Navbar -->
        <nav class="navbar navbar-expand-lg navbar-light bg-primary text-white">
            <div class="container-fluid">
                <a class="navbar-brand text-white" href="#">زليــتـانو</a>
                <div class="collapse navbar-collapse justify-content-end">
                    <ul class="navbar-nav">

                        <li class="nav-item">
                            <a class="nav-link text-white" href="#" @onclick="() => SetPage(Vendor)">تاجير محل</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#" @onclick="() => SetPage(Customer)">Login</a>
                        </li>
                        @if (id_vendor == 0 )
                        {
                            <li class="nav-item">
                                <a class="nav-link text-white" href="/">Home</a>
                            </li>
                        }
                        <li class="nav-item">
                            <a class="nav-link text-white" href="#" @onclick="() => SinOut()">SinOut</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link text-white" href="/add-market" @onclick="() => AddMarket()">انشاء سوق</a>
                        </li>
                        
                    </ul>
                </div>
                <div class="d-flex align-items-center">
                    <!-- User Avatar and Cart Icon -->
                    <div class="me-3 text-white">USER</div>
                    <img src="user-avatar.png" alt="User Avatar" class="rounded-circle" width="40" height="40">

                    <!-- Cart Icon -->
                    <button class="text-white bg-transparent border-0 position-relative ms-3" @onclick="ShowCartModal">
                        <i class="fas fa-shopping-cart fa-lg"></i>
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @cartCount
                        </span>
                    </button>
                </div>
            </div>
        </nav>

        <!-- Modal for Cart -->
        <div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="cartModalLabel">محتويات السلة</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @if (cartItems != null && cartItems.Any())
                        {
                            <ul class="list-group">
                                @foreach (var item in cartItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>اسم المنتج: @item.ProductName الكمية : @item.Quantity</span>
                                        <span class="badge bg-primary rounded-pill">@item.Total.ToString("C")</span>
                                        <!-- Button to remove item from cart -->
                                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveItemFromCart(item)">حذف</button>
                                    </li>
                                }
                            </ul>
                            <div class="mt-2">
                                <button class="btn btn-success btn-sm w-100" @onclick="ConfirmCart">تأكيد السلة</button>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">السلة فارغة.</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Carousel -->
        <div id="mainCarousel" class="carousel slide mt-3 shadow" data-bs-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <img src="/css/images/02.jpg" class="d-block w-100" alt="Slide 1">
                </div>
                <div class="carousel-item">
                    <img src="/css/images/03.jpg" class="d-block w-100" alt="Slide 2">
                </div>
                <div class="carousel-item">
                    <img src="/css/images/04.jpg" class="d-block w-100" alt="Slide 3">
                </div>
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#mainCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#mainCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>

        <article class="content px-4">
            <CascadingValue Value="this">
                @Body
            </CascadingValue>

        </article>
    </main>
</div>

@code {
    private int cartCount = 0;
    private List<CartItem> cartItems ;
    private decimal TootalTootal=0;
    private int BasketId;
    private int id_customer;
    private string TableName { get; set; }
    private string Vendor = "Vendor";
    private string Customer = "Customer";

    private bool DataFromDataBase = false;
    private string _apiBaseUrl = "";

    private int id_vendor;



    private bool GetDataFromDataBase()
    {
        return DataFromDataBase;
    }

        /*
        private async Task RemoveItemFromCart(CartItem itemToRemove)
        {
        // إزالة العنصر المحدد من السلة


        if(itemToRemove.Id != 0)
        {

        try
        {
        var response = await Http.DeleteAsync($"https://localhost:7173/api/Basket_s/Delete?id={itemToRemove.Id}");

        if (response.IsSuccessStatusCode)
        {
        Console.WriteLine("تم الحذف بنجاح");
        // يمكنك إضافة منطق إضافي هنا مثل إعادة توجيه المستخدم أو تحديث الحالة.

        cartItems.Remove(itemToRemove);

        // تحديث sessionStorage بعد الحذف
        await JS.InvokeVoidAsync("sessionStorage.setItem", $"cartItems_{id_customer}", JsonSerializer.Serialize(cartItems));
        await RefreshBasket();
        }
        else
        {
        Console.WriteLine("فشل الحذف");
        }
        }
        catch (Exception ex)
        {
        Console.WriteLine($"خطأ أثناء الحذف: {ex.Message}");
        }
        }
        else
        {
        cartItems.Remove(itemToRemove);

        // تحديث sessionStorage بعد الحذف
        await JS.InvokeVoidAsync("sessionStorage.setItem", $"cartItems_{id_customer}", JsonSerializer.Serialize(cartItems));
    await RefreshBasket();
    }

    // تحديث الواجهة بعد إزالة العنصر
    //  await InvokeAsync(StateHasChanged);
    }
    */
    private async Task RemoveItemFromCart(CartItem itemToRemove)
    {
        // التحقق من وجود العنصر
        if (itemToRemove == null) return;

        try
        {
            if (itemToRemove.Id != 0)
            {
                // طلب حذف العنصر من السلة
                var response = await Http.DeleteAsync($"{_apiBaseUrl}api/Basket_s/Delete?id={itemToRemove.Id}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("تم حذف العنصر بنجاح");

                    // إزالة العنصر من القائمة المحلية
                    cartItems.Remove(itemToRemove);

                    // التحقق إذا كانت السلة فارغة بعد الحذف
                    if (!cartItems.Any())
                    {
                        // حذف السلة بالكامل إذا لم يبق أي عنصر
                        await DeleteBasket(); // فقط عندما id != 0


                    }
                    else
                    {
                        // تحديث sessionStorage بعد الحذف
                        await JS.InvokeVoidAsync("sessionStorage.setItem", $"cartItems_{id_customer}", JsonSerializer.Serialize(cartItems));
                        await RefreshBasket();
                    }
                }
                else
                {
                    Console.WriteLine("فشل في حذف العنصر");
                }
            }
            else
            {
                // إزالة العنصر محليًا إذا لم يكن له معرف في النظام
                cartItems.Remove(itemToRemove);

                // التحديث المحلي فقط، دون حذف السلة
                // تحديث sessionStorage بعد الحذف
                await JS.InvokeVoidAsync("sessionStorage.setItem", $"cartItems_{id_customer}", JsonSerializer.Serialize(cartItems));
                await RefreshBasket();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"خطأ أثناء الحذف: {ex.Message}");
        }

        // تحديث الواجهة
        // await   RefreshBasket();
        await InvokeAsync(StateHasChanged);
    }


    // دالة لحذف السلة بالكامل
    private async Task DeleteBasket()
    {
        if (BasketId != 0)
        {
            try
            {
                var response = await Http.DeleteAsync($"{_apiBaseUrl}api/Basket/Delete?id={BasketId}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("تم حذف السلة بالكامل");
                    cartItems.Clear(); // مسح القائمة محليًا
                    await JS.InvokeVoidAsync("sessionStorage.removeItem", $"cartItems_{id_customer}"); // إزالة البيانات من sessionStorage
                    cartCount = 0;
                }
                else
                {
                    Console.WriteLine("فشل في حذف السلة");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"خطأ أثناء حذف السلة: {ex.Message}");
            }
        }
    }
    public   void updateIdVendor(int id_vendors)
    {
        id_vendor = id_vendors;
        StateHasChanged();
    }

    public void UpdateCartCount(int count)
    {
        cartCount = count;
        StateHasChanged(); // تحديث واجهة المستخدم
    }
    private async Task CloseCartModal()
    {
        await JS.InvokeVoidAsync("eval", @"
        var myModal = bootstrap.Modal.getInstance(document.getElementById('cartModal'));
        myModal.hide();
    ");
    }

    protected override async Task OnInitializedAsync()
    {
        _apiBaseUrl = ApiService.GetApiBaseUrl();
        id_vendor =Convert.ToInt32( await JS.InvokeAsync<string>("sessionStorage.getItem", "id_vendor"));

        // await LoadCartItems();
        await UpdateCartCount();
        // loadBasket();
    }

    private async Task LoadCartItems()
    {
        id_customer = Convert.ToInt32(await JS.InvokeAsync<string>("sessionStorage.getItem", "id_customer"));
        var cartItemsJson = await JS.InvokeAsync<string>("sessionStorage.getItem", $"cartItems_{id_customer}");

        if (!string.IsNullOrEmpty(cartItemsJson))
        {
            cartItems = JsonSerializer.Deserialize<List<CartItem>>(cartItemsJson);
        }
        else
        {
            loadBasket();
            //cartItems = new List<CartItem>();
        }
    }

    private async Task UpdateCartCount()
    {
        await LoadCartItems();
        cartCount = cartItems?.Count ?? 0;
        StateHasChanged();
    }

    public async Task RefreshBasket()
    {
        loadBasket();
        await InvokeAsync(StateHasChanged);
    }
    private async void loadBasket()
    {
        id_customer = Convert.ToInt32(await JS.InvokeAsync<string>("sessionStorage.getItem", "id_customer"));

        TableName = await JS.InvokeAsync<string>("sessionStorage.getItem", "TableName");
        var cartItemsJson = await JS.InvokeAsync<string>("sessionStorage.getItem", $"cartItems_{id_customer}");

        string sessionKey = $"cartItems_{id_customer}";
        string[] parts = sessionKey.Split('_'); // تقسيم النص باستخدام _
        int idCustomer = Convert.ToInt32( parts[1]);

        // خيارات للتحكم في تنسيق JSON
        var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };

        // تحقق من وجود سلة غير مؤكدة
        var response = await Http.GetFromJsonAsync<List<BasketCheckForInsertServiceDTO>>(
            $"{_apiBaseUrl}api/Basket/CheckBasketForInsert?customerId={id_customer}", options);

        if (response != null && response.Any())
        {
            // إذا كانت السلة موجودة
            var basket = response.First(); // افترض أن السلة الأولى هي الهدف
            BasketId = basket.Id;
            TableName = basket.nameIdShope;

            // جلب العناصر غير المؤكدة من السلة
            var basketItems = await Http.GetFromJsonAsync<List<BasketItem>>(
                $"{_apiBaseUrl}api/Basket_s/GetByBasketId?basketId={BasketId}");

            cartItems = new List<CartItem>();

            if (basketItems != null && basketItems.Any())
            {
                foreach (var item in basketItems)
                {
                    // استدعاء API للحصول على تفاصيل المنتج
                    var itemDetails = await Http.GetFromJsonAsync<List<ItemDataWithImagesServiceDTO>>(
                        $"{_apiBaseUrl}api/Shops/GetShopWhereId/{item.ItemId}?tableName={TableName}");

                    if (itemDetails != null && itemDetails.Any())
                    {
                        var product = itemDetails.First(); // إذا كانت الاستجابة تحتوي على عنصر واحد
                        cartItems.Add(new CartItem
                            {
                                Id=item.Id,
                                TableName = TableName,
                                ProductId = item.ItemId,
                                ProductName = product.ProductName, // تعيين اسم المنتج من API
                                Quantity = item.Quantity,
                                Price = item.Price,
                            });
                    }
                    else
                    {
                        Console.WriteLine($"Details for ItemId {item.ItemId} not found.");
                    }
                }
            }

            // إذا كان هناك بيانات في `cartItemsJson`، قم بدمجها
            if (!string.IsNullOrEmpty(cartItemsJson))
            {


                var savedCartItems = JsonSerializer.Deserialize<List<CartItem>>(cartItemsJson);

                if (savedCartItems != null && savedCartItems.Any())
                {
                    // دمج العناصر الموجودة في `cartItemsJson` مع العناصر الحالية
                    foreach (var savedItem in savedCartItems)
                    {
                        if (!cartItems.Any(c => c.ProductId == savedItem.ProductId))
                        {
                            cartItems.Add(savedItem);
                        }
                    }
                }

            }

            // تحديث sessionStorage
            var updatedCartItemsJson = JsonSerializer.Serialize(cartItems);
            await JS.InvokeVoidAsync("sessionStorage.setItem", $"cartItems_{id_customer}", updatedCartItemsJson);
            // await JS.InvokeVoidAsync("sessionStorage.setItem", "DataFromDataBase", true);
            DataFromDataBase = true;

            cartCount = cartItems.Count;
            StateHasChanged();
        }

        if (DataFromDataBase == false)
        {
            if (!string.IsNullOrEmpty(cartItemsJson))
            {

                var savedCartItems = JsonSerializer.Deserialize<List<CartItem>>(cartItemsJson);

                if (savedCartItems != null && savedCartItems.Any())
                {
                    // دمج العناصر الموجودة في `cartItemsJson` مع العناصر الحالية
                    foreach (var savedItem in savedCartItems)
                    {
                        if (!cartItems.Any(c => c.ProductId == savedItem.ProductId))
                        {
                            cartItems.Add(savedItem);
                        }
                    }
                }
                cartCount = cartItems.Count;
                await InvokeAsync(StateHasChanged);

            }
        }



    }
    private async void ShowCartModal()
    {
        id_customer = Convert.ToInt32(await JS.InvokeAsync<string>("sessionStorage.getItem", "id_customer"));
        TableName = await JS.InvokeAsync<string>("sessionStorage.getItem", "TableName");
        var cartItemsJson = await JS.InvokeAsync<string>("sessionStorage.getItem", $"cartItems_{id_customer}");

        // خيارات للتحكم في تنسيق JSON
        var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };

        // تحقق من وجود سلة غير مؤكدة
        var response = await Http.GetFromJsonAsync<List<BasketCheckForInsertServiceDTO>>(
            $"{_apiBaseUrl}api/Basket/CheckBasketForInsert?customerId={id_customer}", options);

        if (response != null && response.Any())
        {
            // إذا كانت السلة موجودة
            var basket = response.First(); // افترض أن السلة الأولى هي الهدف
            BasketId = basket.Id;
            TableName = basket.nameIdShope;

            // جلب العناصر غير المؤكدة من السلة
            var basketItems = await Http.GetFromJsonAsync<List<BasketItem>>(
                $"{_apiBaseUrl}api/Basket_s/GetByBasketId?basketId={BasketId}");

            cartItems = new List<CartItem>();

            if (basketItems != null && basketItems.Any())
            {
                foreach (var item in basketItems)
                {
                    // استدعاء API للحصول على تفاصيل المنتج
                    var itemDetails = await Http.GetFromJsonAsync<List<ItemDataWithImagesServiceDTO>>(
                        $"{_apiBaseUrl}api/Shops/GetShopWhereId/{item.ItemId}?tableName={TableName}");

                    if (itemDetails != null && itemDetails.Any())
                    {
                        var product = itemDetails.First(); // إذا كانت الاستجابة تحتوي على عنصر واحد
                        cartItems.Add(new CartItem
                            {
                                Id=item.Id,
                                TableName=TableName,
                                ProductId = item.ItemId,
                                ProductName = product.ProductName, // تعيين اسم المنتج من API
                                Quantity = item.Quantity,
                                Price = item.Price,
                            });
                    }
                    else
                    {
                        Console.WriteLine($"Details for ItemId {item.ItemId} not found.");
                    }
                }
            }

            // إذا كان هناك بيانات في `cartItemsJson`، قم بدمجها
            if (!string.IsNullOrEmpty(cartItemsJson))
            {
                var savedCartItems = JsonSerializer.Deserialize<List<CartItem>>(cartItemsJson);

                if (savedCartItems != null && savedCartItems.Any())
                {
                    // دمج العناصر الموجودة في `cartItemsJson` مع العناصر الحالية
                    foreach (var savedItem in savedCartItems)
                    {
                        if (!cartItems.Any(c => c.ProductId == savedItem.ProductId))
                        {
                            cartItems.Add(savedItem);
                        }
                    }
                }
            }

            // تحديث sessionStorage
            var updatedCartItemsJson = JsonSerializer.Serialize(cartItems);
            await JS.InvokeVoidAsync("sessionStorage.setItem", $"cartItems_{id_customer}", updatedCartItemsJson);
            // await JS.InvokeVoidAsync("sessionStorage.setItem", "DataFromDataBase", true);
            DataFromDataBase = true;

            cartCount = cartItems.Count;
            StateHasChanged();
        }

        // عرض المودال
        await JS.InvokeVoidAsync("eval", @"
            var myModal = new bootstrap.Modal(document.getElementById('cartModal'));
            myModal.show();
            ");
    }



    private async Task ConfirmCart()
    {
        if (BasketId == 0)
        {

            var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
                };
            var response = await Http.GetFromJsonAsync <List<BasketCheckForInsertServiceDTO>>($"{_apiBaseUrl}api/Basket/CheckBasketForInsert?customerId={id_customer}", options);
            if (response == null || response .Count==0)
            {
                var createResponse = await Http.PostAsJsonAsync($"{_apiBaseUrl}api/Basket/Create", new BasketAddItemServiceDTO
                    {
                        customerId = id_customer,
                        nameIdShope = TableName,
                        countElementBasket = cartCount,
                        tootal = TootalTootal
                    });

                // التحقق من نجاح الاستجابة
                if (createResponse.IsSuccessStatusCode)
                {
                    // قراءة البيانات التي أعادها الـ API
                    var basketResponse = await createResponse.Content.ReadFromJsonAsync<BasketGetByIdServiceDTO>();

                    if (basketResponse != null)
                    {
                        // تخزين basketId في sessionStorage أو أي مكان آخر
                        var basketId = basketResponse.Id;  // افترض أن Id هو الـ basketId
                        BasketId = basketId;

                        // تخزين الـ basketId في sessionStorage
                        await JS.InvokeVoidAsync("sessionStorage.setItem", "BasketId", basketId.ToString());

                        // يمكنك الآن استخدام الـ basketId حسب الحاجة
                    }
                    else
                    {
                        // معالجة حالة الاستجابة إذا كانت غير صحيحة أو فارغة
                        Console.WriteLine("لا يمكن استخراج basketId.");
                    }
                }
                else
                {
                    // التعامل مع حالة فشل الاستجابة
                    Console.WriteLine("فشل الاتصال بـ API أو هناك خطأ.");
                }
            }
            else
            {
                if (response != null && response.Any())
                {
                    var basket = response.First(); // الحصول على أول عنصر إذا كانت المصفوفة تحتوي على عناصر
                    BasketId = basket.Id;
                }

            }
        }

        if (DataFromDataBase == false)
        {
            // إرسال العناصر إلى الـ API
            foreach (var item in cartItems)
            {
                var basketItem = new Bsket_sAddServiceDTO
                    {
                        BasketId = BasketId,  // تأكد من تمرير الـ BasketId الصحيح
                        ItemId = item.ProductId,  // تأكد من إرسال الـ ProductId كـ ItemId
                        Quantity = item.Quantity,
                        Totoal = item.Total,
                        Date = DateTime.Now
                    };

                // إرسال البيانات إلى الـ API
                var response = await Http.PostAsJsonAsync($"{_apiBaseUrl}api/Basket_s/Create", basketItem);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"تم إضافة العنصر {item.ProductName} بنجاح!");
                }
                else
                {
                    Console.WriteLine($"فشل إضافة العنصر {item.ProductName}.");
                }
            }
        }
        var sendEmail = await Http.PostAsJsonAsync($"{_apiBaseUrl}api/Basket/SendEmial", new BasketSendEmailServiceDTO { BasketId = BasketId, customerId = id_customer });
        if (sendEmail.IsSuccessStatusCode)
        {
            // await JS.InvokeVoidAsync("alert", "تم تأكيد السلة بنجاح!");

            await UpdateCartCount();
            await JS.InvokeVoidAsync("sessionStorage.setItem", "BasketId", BasketId);
            await CloseCartModal();
            Navigation.NavigateTo("/cheak-code-basket");
        }
    }

    private async Task SinOut()
    {
        await JS.InvokeVoidAsync("sessionStorage.setItem", "BasketId", 0);
        await JS.InvokeVoidAsync("sessionStorage.setItem", "id_customer", 0);
        await JS.InvokeVoidAsync("sessionStorage.setItem", "currentPage", "");
        await JS.InvokeVoidAsync("sessionStorage.setItem", "username", "");
        await JS.InvokeVoidAsync("sessionStorage.setItem", "password", "");
        await JS.InvokeVoidAsync("sessionStorage.setItem", "id_vendor", 0);
        updateIdVendor(0);
        Navigation.NavigateTo("/");
    }
    private async Task AddMarket()
    {
        
      
        Navigation.NavigateTo("/add-market");
    }
   
    private async Task SetPage(string page)
    {
        await JS.InvokeVoidAsync("sessionStorage.setItem", "currentPage", page);
        Navigation.NavigateTo("/Login", forceLoad: false);
    }

    public class CartItem
    {
        
        public int Id { get; set; } = 0;
        public string TableName { get; set; }
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public decimal Total => Price * Quantity;
    }
}
